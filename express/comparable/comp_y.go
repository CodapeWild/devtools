// Code generated by goyacc -o comp_y.go -p comp comp.y. DO NOT EDIT.

//line comp.y:2
package comparable

import __yyfmt__ "fmt"

//line comp.y:2

import (
	"fmt"
)

//line comp.y:9
type compSymType struct {
	yys   int
	comp  Comparable
	comps []Comparable
}

const SEMICOLON = 57346
const LEFT_CURLY_BRACKET = 57347
const RIGHT_CULY_BRACKET = 57348
const COMMA = 57349
const AND = 57350
const OR = 57351
const GREAT = 57352
const LITTLE = 57353
const GREAT_EQUAL = 57354
const LITTLE_EQUAL = 57355
const EQUAL = 57356
const NOT_EQUAL = 57357
const IN = 57358
const NOT_IN = 57359
const MATCH = 57360
const LEFT_BRACE = 57361
const RIGHT_BRACE = 57362
const COMPARABLE = 57363

var compToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SEMICOLON",
	"LEFT_CURLY_BRACKET",
	"RIGHT_CULY_BRACKET",
	"COMMA",
	"AND",
	"OR",
	"GREAT",
	"LITTLE",
	"GREAT_EQUAL",
	"LITTLE_EQUAL",
	"EQUAL",
	"NOT_EQUAL",
	"IN",
	"NOT_IN",
	"MATCH",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"COMPARABLE",
}
var compStatenames = [...]string{}

const compEofCode = 1
const compErrCode = 2
const compInitialStackSize = 16

//line comp.y:148

//line yacctab:1
var compExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const compPrivate = 57344

const compLast = 92

var compAct = [...]int{

	12, 49, 48, 4, 7, 15, 9, 14, 11, 13,
	15, 50, 14, 58, 47, 45, 44, 13, 15, 7,
	14, 9, 10, 54, 38, 39, 40, 41, 42, 43,
	36, 37, 13, 15, 54, 14, 55, 31, 9, 19,
	46, 2, 35, 21, 22, 34, 17, 53, 51, 13,
	15, 1, 14, 56, 52, 16, 57, 23, 24, 25,
	26, 27, 28, 29, 30, 23, 24, 25, 26, 27,
	28, 29, 30, 5, 8, 6, 3, 0, 0, 0,
	0, 18, 0, 0, 0, 20, 0, 0, 0, 0,
	33, 32,
}
var compPact = [...]int{

	-1, -1000, -1000, 51, -1, -1000, -1000, 14, 32, 31,
	35, 55, -1000, 18, -1000, 31, 14, -1000, 39, -9,
	-1000, -9, -9, -14, -14, -14, -14, -14, -14, -3,
	-4, -9, -6, -1000, -1000, 35, 55, 55, -1000, -1000,
	-1000, -1000, -1000, -1000, -10, -10, 47, -1000, 27, -1000,
	-1000, 16, -14, -1000, -10, -1000, -7, -1000, -1000,
}
var compPgo = [...]int{

	0, 41, 76, 73, 75, 74, 22, 8, 0, 2,
	1, 51,
}
var compR1 = [...]int{

	0, 11, 1, 1, 2, 2, 3, 3, 4, 4,
	5, 5, 6, 6, 6, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 9, 9, 10, 8, 8,
}
var compR2 = [...]int{

	0, 1, 1, 2, 1, 3, 1, 3, 1, 2,
	1, 3, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 3, 5, 5, 6, 1, 3, 1, 1, 3,
}
var compChk = [...]int{

	-1000, -11, -1, -2, 4, -3, -4, 5, -5, 7,
	-6, -7, -8, 18, 21, 19, 4, -1, -3, 7,
	-4, 8, 9, 10, 11, 12, 13, 14, 15, 16,
	17, 19, -4, -3, 6, -6, -7, -7, -8, -8,
	-8, -8, -8, -8, 19, 19, -7, 20, -9, -10,
	21, -9, 7, 20, 7, 20, -8, -10, 20,
}
var compDef = [...]int{

	0, -2, 1, 2, 0, 4, 6, 0, 8, 0,
	10, 12, 15, 0, 28, 0, 0, 3, 0, 0,
	9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5, 7, 11, 13, 14, 16, 17,
	18, 19, 20, 21, 0, 0, 0, 29, 0, 25,
	27, 0, 0, 22, 0, 23, 0, 26, 24,
}
var compTok1 = [...]int{

	1,
}
var compTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
}
var compTok3 = [...]int{
	0,
}

var compErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	compDebug        = 0
	compErrorVerbose = false
)

type compLexer interface {
	Lex(lval *compSymType) int
	Error(s string)
}

type compParser interface {
	Parse(compLexer) int
	Lookahead() int
}

type compParserImpl struct {
	lval  compSymType
	stack [compInitialStackSize]compSymType
	char  int
}

func (p *compParserImpl) Lookahead() int {
	return p.char
}

func compNewParser() compParser {
	return &compParserImpl{}
}

const compFlag = -1000

func compTokname(c int) string {
	if c >= 1 && c-1 < len(compToknames) {
		if compToknames[c-1] != "" {
			return compToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func compStatname(s int) string {
	if s >= 0 && s < len(compStatenames) {
		if compStatenames[s] != "" {
			return compStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func compErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !compErrorVerbose {
		return "syntax error"
	}

	for _, e := range compErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + compTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := compPact[state]
	for tok := TOKSTART; tok-1 < len(compToknames); tok++ {
		if n := base + tok; n >= 0 && n < compLast && compChk[compAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if compDef[state] == -2 {
		i := 0
		for compExca[i] != -1 || compExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; compExca[i] >= 0; i += 2 {
			tok := compExca[i]
			if tok < TOKSTART || compExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if compExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += compTokname(tok)
	}
	return res
}

func complex1(lex compLexer, lval *compSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = compTok1[0]
		goto out
	}
	if char < len(compTok1) {
		token = compTok1[char]
		goto out
	}
	if char >= compPrivate {
		if char < compPrivate+len(compTok2) {
			token = compTok2[char-compPrivate]
			goto out
		}
	}
	for i := 0; i < len(compTok3); i += 2 {
		token = compTok3[i+0]
		if token == char {
			token = compTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = compTok2[1] /* unknown char */
	}
	if compDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", compTokname(token), uint(char))
	}
	return char, token
}

func compParse(complex compLexer) int {
	return compNewParser().Parse(complex)
}

func (comprcvr *compParserImpl) Parse(complex compLexer) int {
	var compn int
	var compVAL compSymType
	var compDollar []compSymType
	_ = compDollar // silence set and not used
	compS := comprcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	compstate := 0
	comprcvr.char = -1
	comptoken := -1 // comprcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		compstate = -1
		comprcvr.char = -1
		comptoken = -1
	}()
	compp := -1
	goto compstack

ret0:
	return 0

ret1:
	return 1

compstack:
	/* put a state and value onto the stack */
	if compDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", compTokname(comptoken), compStatname(compstate))
	}

	compp++
	if compp >= len(compS) {
		nyys := make([]compSymType, len(compS)*2)
		copy(nyys, compS)
		compS = nyys
	}
	compS[compp] = compVAL
	compS[compp].yys = compstate

compnewstate:
	compn = compPact[compstate]
	if compn <= compFlag {
		goto compdefault /* simple state */
	}
	if comprcvr.char < 0 {
		comprcvr.char, comptoken = complex1(complex, &comprcvr.lval)
	}
	compn += comptoken
	if compn < 0 || compn >= compLast {
		goto compdefault
	}
	compn = compAct[compn]
	if compChk[compn] == comptoken { /* valid shift */
		comprcvr.char = -1
		comptoken = -1
		compVAL = comprcvr.lval
		compstate = compn
		if Errflag > 0 {
			Errflag--
		}
		goto compstack
	}

compdefault:
	/* default state action */
	compn = compDef[compstate]
	if compn == -2 {
		if comprcvr.char < 0 {
			comprcvr.char, comptoken = complex1(complex, &comprcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if compExca[xi+0] == -1 && compExca[xi+1] == compstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			compn = compExca[xi+0]
			if compn < 0 || compn == comptoken {
				break
			}
		}
		compn = compExca[xi+1]
		if compn < 0 {
			goto ret0
		}
	}
	if compn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			complex.Error(compErrorMessage(compstate, comptoken))
			Nerrs++
			if compDebug >= 1 {
				__yyfmt__.Printf("%s", compStatname(compstate))
				__yyfmt__.Printf(" saw %s\n", compTokname(comptoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for compp >= 0 {
				compn = compPact[compS[compp].yys] + compErrCode
				if compn >= 0 && compn < compLast {
					compstate = compAct[compn] /* simulate a shift of "error" */
					if compChk[compstate] == compErrCode {
						goto compstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if compDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", compS[compp].yys)
				}
				compp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if compDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", compTokname(comptoken))
			}
			if comptoken == compEofCode {
				goto ret1
			}
			comprcvr.char = -1
			comptoken = -1
			goto compnewstate /* try again in the same state */
		}
	}

	/* reduction by production compn */
	if compDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", compn, compStatname(compstate))
	}

	compnt := compn
	comppt := compp
	_ = comppt // guard against "declared and not used"

	compp -= compR2[compn]
	// compp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if compp+1 >= len(compS) {
		nyys := make([]compSymType, len(compS)*2)
		copy(nyys, compS)
		compS = nyys
	}
	compVAL = compS[compp+1]

	/* consult goto table to find next state */
	compn = compR1[compn]
	compg := compPgo[compn]
	compj := compg + compS[compp].yys + 1

	if compj >= compLast {
		compstate = compAct[compg]
	} else {
		compstate = compAct[compj]
		if compChk[compstate] != -compn {
			compstate = compAct[compg]
		}
	}
	// dummy call; replaced with literal code
	switch compnt {

	case 1:
		compDollar = compS[comppt-1 : comppt+1]
//line comp.y:27
		{
			if b, err := compDollar[1].comp.boolean(); err != nil {
				fmt.Println(err.Error())
			} else {
				if b {
					fmt.Println("true")
				} else {
					fmt.Println("false")
				}
			}
		}
	case 3:
		compDollar = compS[comppt-2 : comppt+1]
//line comp.y:42
		{
			compVAL.comp = compDollar[2].comp
		}
	case 5:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:49
		{
			compVAL.comp = compDollar[1].comp.Or(compDollar[3].comp)
		}
	case 7:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:56
		{
			compVAL.comp = compDollar[2].comp
		}
	case 9:
		compDollar = compS[comppt-2 : comppt+1]
//line comp.y:63
		{
			compVAL.comp = compDollar[2].comp
		}
	case 11:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:70
		{
			compVAL.comp = compDollar[1].comp.And(compDollar[3].comp)
		}
	case 13:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:77
		{
			compVAL.comp = compDollar[1].comp.And(compDollar[3].comp)
		}
	case 14:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:81
		{
			compVAL.comp = compDollar[1].comp.Or(compDollar[3].comp)
		}
	case 16:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:88
		{
			compVAL.comp = compDollar[1].comp.GreatThan(compDollar[3].comp)
		}
	case 17:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:92
		{
			compVAL.comp = compDollar[1].comp.LittleThan(compDollar[3].comp)
		}
	case 18:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:96
		{
			compVAL.comp = compDollar[1].comp.GreatEqualThan(compDollar[3].comp)
		}
	case 19:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:100
		{
			compVAL.comp = compDollar[1].comp.LittleEqualThan(compDollar[3].comp)
		}
	case 20:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:104
		{
			compVAL.comp = compDollar[1].comp.Equal(compDollar[3].comp)
		}
	case 21:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:108
		{
			compVAL.comp = compDollar[1].comp.NotEqual(compDollar[3].comp)
		}
	case 22:
		compDollar = compS[comppt-5 : comppt+1]
//line comp.y:112
		{
			compVAL.comp = compDollar[1].comp.In(params...)
		}
	case 23:
		compDollar = compS[comppt-5 : comppt+1]
//line comp.y:116
		{
			compVAL.comp = compDollar[1].comp.NotIn(params...)
		}
	case 24:
		compDollar = compS[comppt-6 : comppt+1]
//line comp.y:120
		{
			compVAL.comp = Match(compDollar[3].comp.string(), compDollar[5].comp.string())
		}
	case 25:
		compDollar = compS[comppt-1 : comppt+1]
//line comp.y:126
		{
			compVAL.comps = []Comparable{compDollar[1].comp}
		}
	case 26:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:130
		{
			compVAL.comps = append(compVAL.comps, compDollar[3].comp)
		}
	case 27:
		compDollar = compS[comppt-1 : comppt+1]
//line comp.y:136
		{
			compVAL.comp = compDollar[1].comp
		}
	case 29:
		compDollar = compS[comppt-3 : comppt+1]
//line comp.y:143
		{
			compVAL.comp = compDollar[2].comp
		}
	}
	goto compstack /* stack new state and value */
}
